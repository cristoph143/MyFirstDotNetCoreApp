<h1>Home</h1>
@* @await Component.InvokeAsync("Grid") *@
<button class="button button-blue-back" id="load-friends-button">Load Friends</button>
<div class="box">
    Environment: @ViewBag.CurrentEnviornment
</div>
<environment include="Development">
    <button class="button button-blue-back">Button only for Development Environment</button>
</environment>

<environment exclude="Development">
    <button class="button button-green-back">Button only for Except in Development Environment</button>
</environment>
<div id="list"></div>
<script src="~/Scripts/friends.js"></script>
<a>-------------------------------------------</a>
@{
    var personGridModel = new PersonGridModel
    {
        GridTitle = "Persons",
        Persons = new List<PersonModel>
        {
            new() { PersonName = "John", JobTitle = "Manager" },
            new() { PersonName = "Jones", JobTitle = "Asst. Manager" },
            new() { PersonName = "William", JobTitle = "Clerk" }
        }
    };
}
@await Component.InvokeAsync("Grid", new
       {
           grid = personGridModel
       })


@{
    var personGridModel2 = new PersonGridModel
    {
        GridTitle = "Friends",
        Persons = new List<PersonModel>
        {
            new() { PersonName = "Mia", JobTitle = "Developer" },
            new() { PersonName = "Emma", JobTitle = "UI Designer" },
            new() { PersonName = "Avva", JobTitle = "QA" }
        }
    };
}
@await Component.InvokeAsync("Grid", new
       {
           grid = personGridModel2
       })
<button class="button button-blue-back" type="button" id="button-load">Load Programming Languages</button>

<div class="box programming-languages-content">

</div>

<script>
  document.querySelector("#button-load").addEventListener("click", async function () {
    var response = await fetch("programming-languages");
    var languages = await response.text();
    console.log(response)
    document.querySelector(".programming-languages-content").innerHTML = languages;
  });
</script>
<partial name="_ListPartialView"></partial>

@{
    var myViewData = new ViewDataDictionary(ViewData);

    myViewData["ListTitle"] = "Countries";
    myViewData["ListItems"] = new List<string>
    {
        "USA",
        "Canada",
        "Japan",
        "Germany",
        "India"
    };
}
<div class="box">
    <partial name="_ListPartialView" view-data="myViewData"></partial>
</div>

<h3>ListTitle in View: @ViewData["ListTitle"]</h3>
<h1>Home</h1>

@{
    var listModel = new ListModel();
    listModel.ListTitle = "Countries";
    listModel.ListItems = new List<string>
    {
        "USA",
        "Canada",
        "Japan",
        "Germany",
        "India"
    };
}
<partial name="_ListPartialView" model="listModel"></partial>